
---@class Any : table

---@alias EventConditionFun fun(inst: GuiInst):boolean

---@class GuiInst : LuaGuiElement.add_param, GuiClass
---@field id integer
---@field name string|nil
---@field class string
---@field elem LuaGuiElement
---@field parent GuiInst
---@field core GuiInst|nil
---@field children GuiInst[]
---@field elem_mods table<string, Any>|nil
---@field style_mods table<string, Any>|nil

---@class GuiClass
---@field class_name string
---transform `child` (for example it's `name` or `core`),
---which is also the `params` table passed to `create`
---@field on_pre_create fun(child: GuiChild, parent?: GuiInst)|nil
---@field create fun(params?: table): GuiInst, table<Any, Any>|nil
---@field on_elem_created fun(inst: GuiInst)|nil
---@field on_children_created fun(inst: GuiInst)|nil
---@field on_destroy fun(inst: GuiInst)|nil
---@field event_conditions table<string, EventConditionFun>
---@field add fun(inst: GuiInst, child: GuiChild): GuiInst @ add a child to this instantce
---@field destroy fun(inst: GuiInst) @ destroy this instance

---@class StdGuiClass : GuiStructure

---@class GuiStructure
---@field class_name string
---@field states string[]|nil @ names of states this class is going to use
---@field class string|nil @ parent class name used for children
---@field children GuiStructure[]|nil

---@class StdAttribute
---@field __std_gui boolean @ true
---@field type EnumStdGuiAttribute
---@field setter fun(state: State): Any
---@field triggers StdAttributeTrigger[]|nil @ if this is dynamic defines which state changes trigger the setter to be called

---@class StdAttributeTrigger
---@field state_name string
---@field field_name string

---@class GuiChild
---@field class string @ class_name
---@field name string|nil
---@field core GuiInst|nil

---@class BasicGuiInst : GuiInst
---@field core GuiInst|nil
---@field name_for_events string|nil
---@field parent_event_names string[]


---@class StateFake : State

---@class State : table
---@field __internal StateInternal

---@class StateInternal
---@field controllers table<StateController, boolean>
---@field data table @ Any table keys or values are StateFakes
---@field changes StateChange[]
---@field change_count integer
---@field fake StateFake
---@field lowest_changed_index integer|nil @ --TODO

---@class StateController
---@field changed_state_lut table<StateInternal, boolean>

---@class StateChange
---@field type EnumStateChange
---@field key Any
---@field old Any|nil
---@field new Any|nil

-- fix semantics