
---@class Any : table

---@alias EventConditionFun fun(inst: GuiInst):boolean

---@alias GuiData table<Any, Any>
---@alias ElemOrStyleMods table<string, Any>

---@class GuiElementMods
---@field elem_mods ElemOrStyleMods|nil
---@field style_mods ElemOrStyleMods|nil

---@class GuiClassDefinitionBase
---@field class_name string
---transform `child`/`params` (for example it's `name` or `core`),
---which is also the `params` table passed to `create`
---@field on_pre_create fun(params: GuiCreateParams, parent?: GuiInst) @ optional
---@field on_elem_created fun(inst: GuiInst) @ optional
---@field on_children_created fun(inst: GuiInst) @ optional
---@field on_destroy fun(inst: GuiInst) @ optional

---@class GuiClassDefinition : GuiClassDefinitionBase
---@field create fun(params?: GuiCreateParams): GuiInstDefinition, GuiData?
---@field event_conditions table<string, EventConditionFun>

---@class GuiInstDefinition : GuiElementMods
---@field add_param LuaGuiElement.add_param
---@field children GuiInstDefinition[]|nil

---@class GuiClass : GuiClassDefinition
---@field add fun(inst: GuiInst, child: GuiChild): GuiInst @ add a child to this instantce
---@field destroy fun(inst: GuiInst) @ destroy this instance

---@class GuiInst : GuiClass, table
---@field id integer @ readonly
---@field name string|nil
---@field elem LuaGuiElement
---@field parent GuiInst|nil
---@field core GuiInst|nil

---@class GuiChild
---@field class string @ class_name
---@field name string|nil
---@field core GuiInst|nil
---@field index integer|nil @ Location in it's parent that the child element should slot into. By default, the child will be appended onto the end.

---@class GuiCreateParams : GuiChild, table


---@class StdGuiStructureFunctions
---@field get_children fun(self: StdGuiInst): StdGuiChild[] @ optional
---@field on_state_dispatch fun(self: StdGuiInst, state: State, state_name: string) @ optional

---@class StdFrameworkClass : GuiClass, StdGuiStructureFunctions
---@field base_class StdFrameworkClass|nil
---@field structures string[]

---@class StdGuiClass
---@field class_name string
---@field structure StdGuiStructure
---@field framework_class GuiClass
---@field base_class StdGuiClass|nil
---@field state_names string[]|nil
---@field structure_names string[]
---@field extra_class_data table

---@class StdGuiInst : GuiInst, StdFrameworkClass, table
---@field states State[]

---@class StdGuiChild : GuiChild
---@field states State[]

---@class StdGuiStructure : GuiElementMods, GuiClassDefinitionBase, StdGuiStructureFunctions
---@field states string[]|nil @ names of states this class is going to use
---@field base_class string|nil
---@field structures StdGuiStructure[]|nil

---@class StdGuiStructureAddParam : StdGuiStructure, LuaGuiElement.add_param


---@class StdAttribute
---@field __std_gui boolean @ true
---@field type EnumStdGuiAttribute
---@field setter fun(state: State, ...): Any
---@field triggers StdAttributeTrigger[]|nil @ if this is dynamic defines which state changes trigger the setter to be called

---@class StdRuntimeAttribute
---@field setter fun(state: State, ...): Any
---@field attribute_name string
---@field is_for_styles boolean

---@class StdAttributeTrigger
---@field state_name string
---@field field_name string



---@class State : table
---@field __internal StateInternal

---@class StateInternal
---@field data table<Any, Any>
---@field changes StateChange[]
---@field change_count integer
---@field fake State
---@field lowest_changed_index integer|nil

---@class StateChange
---@field type EnumStateChange
---@field key Any
---@field old Any|nil
---@field new Any|nil

---@class Preprocessor
preprocessor = {}

-- fix semantics