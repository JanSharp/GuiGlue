
local event_names = require("event-names")

---@type table<string, GuiClass>
local classes = {}
-- table<event_name, table<GuiInst.id, GuiInst>>
---@type table<string, table<number, GuiInst>>
local event_handlers = {}
-- table<class_name, evevnt_name[]>
---@type table<string, string[]>
local cached_class_events = {}
-- table<class_name, table<event_name, event_condition_func>>
---@type table<string, table<string, EventConditionFun>>
local conditional_cached_class_events = {}

local script_data
local insts
local tags_prefab

local tags_magic = 7235849015680863

local restore_metatables

local function on_load()
  script_data = global.gui_glue
  insts = script_data.insts
  tags_prefab = script_data.tags_prefab
  restore_metatables()
end

local function on_init()
  ---@type GuiInst[]
  insts = {}
  ---@class tags_prefab
  tags_prefab = {
    __gui_glue_magic = tags_magic,
    id = 1,
  }
  ---@class gui_glue_script_data
  script_data = {
    insts = insts,
    tags_prefab = tags_prefab,
  }
  global.gui_glue = script_data
end

for _, event_name in pairs(event_names) do
  event_handlers[event_name] = {}
end

---@param inst GuiInst
local function add_event_handlers(inst)
  local id = inst.id
  local class_name = inst.class_name
  for _, event_name in pairs(cached_class_events[class_name]) do
    event_handlers[event_name][id] = inst
  end
  for event_name, condition in pairs(conditional_cached_class_events[class_name]) do
    if condition(inst) then
      event_handlers[event_name][id] = inst
    end
  end
end

--- removes all handlers for the given inst from event_handlers
---@param id integer @ id of the element of the instance
---@param inst GuiInst
local function remove_event_handlers(id, inst)
  for _, event_name in pairs(event_names) do
    event_handlers[event_name][id] = nil
  end
end

function restore_metatables()
  for _, inst in pairs(insts) do
    local class = classes[inst.class]
    if not class then
      error("Missing gui class '"..inst.class
        .."'. Please register all classes before on_load and make sure migration is working properly.")
    end
    setmetatable(inst, class)
    add_event_handlers(inst)
  end
end

-- HACK: language server being weird
---@diagnostic disable

---@param parent_element LuaGuiElement
---@param child GuiChild
---@param parent? GuiInst
---@return GuiInst
local function create_internal(parent_element, child, parent)
  local class_name = child.class
  local class = classes[class_name]
  if not class then
    error("No class with the 'class_name' \""..class_name.."\" registered.")
  end

  local on_pre_create = class.on_pre_create
  if on_pre_create then
    on_pre_create(child, parent)
  end

  local name = child.name
  local core = child.core

  -- HACK: language server annotations being weird
  ---@typelist GuiInstDefinition, GuiData
  local inst, data = class.create(child)
  setmetatable(inst, class)

  ---@type GuiChild[]
  local children = inst.children
  inst.children = {} -- removing the reference to children before parent_element.add,
  -- because children may cause recursive tables

  local add_param = inst.add_param
  inst.add_param = nil
  local elem_mods = inst.elem_mods
  inst.elem_mods = nil
  local style_mods = inst.style_mods
  inst.style_mods = nil

  add_param.name = name
  add_param.index = child.index
  local tags = tags_prefab
  add_param.tags = tags
  -- HACK: language server annotations being weird
  ---@type LuaGuiElement
  ---@diagnostic disable-next-line: undefined-field
  local elem = parent_element.add(add_param)
  inst.elem = elem
  local id = tags.id
  inst.id = id
  tags_prefab.id = id + 1
  insts[id] = inst
  if parent then
    inst.parent = parent
    parent.children[id] = inst
  end
  if core then
    inst.core = core
    if name then
      core[name] = inst
    end
  end
  if data then
    for k, v in pairs(data) do
      inst[k] = v
    end
  end

  if elem_mods then
    for k, v in pairs(elem_mods) do
      elem[k] = v
    end
  end

  if style_mods then
    local style = elem.style
    for k, v in pairs(style_mods) do
      style[k] = v
    end
  end

  local on_elem_created = class.on_elem_created
  if on_elem_created then
    on_elem_created(inst)
  end

  add_event_handlers(inst)

  if children then
    for _, child in pairs(children) do
      create_internal(elem, child, inst)
    end
  end

  local on_children_created = class.on_children_created
  if on_children_created then
    on_children_created(inst)
  end

  return inst
end

-- HACK: language server being weird
---@diagnostic enable

---@param parent_element LuaGuiElement
---@param child GuiChild
---@return GuiInst
local function create(parent_element, child)
  return create_internal(parent_element, child, nil)
end

---@param inst GuiInst
---@param child GuiChild
---@return GuiInst
local function add(inst, child)
  return create_internal(inst.elem, child, inst)
end

---cleans up and calls inst.on_destroy if it exists.
---@param id integer
---@param inst GuiInst
local function destroy_internal(id, inst)
  insts[id] = nil
  remove_event_handlers(id, inst)
  local func = inst.on_destroy
  if func then func(inst) end
end

---calls inst.on_destroy on every child, and child of child if it exists.
---@param inst GuiInst
local function destroy_recursive(inst)
  for _, child in pairs(inst.children) do
    destroy_recursive(child)
  end
  destroy_internal(inst.id, inst)
end

---destroy()s all instances with invalid elements
local function clear_invalid_instances()
  local id, inst = next(insts)
  while id do
    local nk, nv = next(insts, id)
    if not inst.elem.valid then
      destroy_internal(id, inst)
    end
    id, inst = nk, nv
  end
end

---destroys inst and all of it's children.
---
---calls on_destroy on every inst getting destroyed.
---
---if inst is a child, it will remove itself from the parent.
---@param inst GuiInst
local function destroy(inst)
  if not inst.elem.valid then
    return clear_invalid_instances()
  end
  destroy_recursive(inst)
  inst.elem.destroy()

  local parent = inst.parent
  if parent then
    parent.children[inst.id] = nil
    local name = inst.name
    if name then
      local core = inst.core
      if core then
        core[name] = nil
      end
    end
  end
end

---@param class GuiClass
local function register_class(class)
  -- validate_class(class)
  classes[class.class_name] = class
  class.__index = class

  local class_events = {}
  local conditional_class_events = {}
  cached_class_events[class.class_name] = class_events
  conditional_cached_class_events[class.class_name] = conditional_class_events

  for _, event_name in pairs(event_names) do
    if class["on_"..event_name] then
      local condition = class.event_conditions and class.event_conditions["on_"..event_name]
      if condition ~= nil then
        conditional_class_events[event_name] = type(condition) == "function"
          and condition
          or function() return condition end
      else
        class_events[#class_events+1] = event_name
      end
    end
  end

  -- these functions will be directly accessable on the instances, because metatables
  class.add = add
  class.destroy = destroy
end

for _, event_name in pairs(event_names) do
  local handler_name = "on_"..event_name
  local event_specific_handlers = event_handlers[event_name]

  ---@param event on_gui_click (or any other of the on_gui events)
  script.on_event(defines.events["on_gui_"..event_name], event => {
    if not event.element then return end -- for on_gui_closed and on_gui_opened
    local tags = event.element.tags
    if tags.__gui_glue_magic == tags_magic then
      local inst = event_specific_handlers[tags.id]
      if inst then
        inst[handler_name](inst, event)
      end
    end
  })
end

return {
  on_load = on_load,
  on_init = on_init,
  create = create,
  add = add,
  register_class = register_class,
  clear_invalid_instances = clear_invalid_instances,
  destroy = destroy,
}

-- fix semantics