
local meta_util = require("__GuiGlue__.metatable-util")
local enums = require("__GuiGlue__.enums")
local state_change = enums.state_change

local table_remove = table.remove
local table_insert = table.insert

local meta_id = "state_6674114660568425"
local meta

local changed_state_lut ---@type table<State, boolean>

local function on_load()
  changed_state_lut = global.__state_util.changed_state_lut
  meta_util.restore_metatables()
end

local function on_init()
  changed_state_lut = {}
  global.__state_util = {
    changed_state_lut = changed_state_lut,
  }
end

local function get_changed_state_lut()
  return changed_state_lut
end

---@param source table
---@return State @ the table source gets modified to become this return value
local function hook(source)
  local internal_data = {}
  local internal = { ---@type StateInternal
    data = internal_data,
    -- lowest_changed_index = nil,
    changes = {},
    change_count = 0,
    fake = source, -- source will become the fake table
  }

  -- move data to internal_data
  local k, v = next(source) ---@type Any
  while k do
    local nk, nv = next(source, k) ---@type Any
    source[k] = nil
    internal_data[k] = v
    k, v = nk, nv
  end
  -- source is now the fake table

  source.__internal = internal
  source.__meta_id = meta_id
  setmetatable(source, meta)
  return source
end

---@param tab table
---@return boolean @ wether the given table is hooked
local function is_hooked(tab)
  return tab.__meta_id == meta_id
end

---ensures the given table is hooked and returns the resulting state
---@param tab table
---@return State
local function ensure_hook(tab)
  if tab.__meta_id == meta_id then
    return tab
  else
    return hook(tab)
  end
end

---@param fake State
local function unhook(fake)
  setmetatable(fake, nil)
  -- move data back
  ---@type Any
  for k, v in next, fake.__internal.data do
    fake[k] = v
  end
  fake.__internal = nil
  fake.__meta_id = nil
end

---@param fake_list State
---@param pos integer
---@return Any @ the removed value
local function remove(fake_list, pos)
  local internal = fake_list.__internal
  do
    local lowest_changed_index = internal.lowest_changed_index
    if not lowest_changed_index or pos < lowest_changed_index then
      internal.lowest_changed_index = pos
    end
  end
  local data = internal.data

  -- add change
  local changes = internal.changes
  local change_count = internal.change_count + 1
  internal.change_count = change_count ---@type integer
  changes[change_count] = {
    type = state_change.removed,
    key = pos,
    old = data[pos], ---@type Any
  }

  changed_state_lut[fake_list] = true

  return table_remove(data, pos)
end

---@param fake_list State
---@param pos integer
---@param value Any
---@return nil
local function insert(fake_list, pos, value)
  local internal = fake_list.__internal
  do
    local lowest_changed_index = internal.lowest_changed_index
    if not lowest_changed_index or pos < lowest_changed_index then
      internal.lowest_changed_index = pos
    end
  end
  local data = internal.data

  -- add change
  local changes = internal.changes
  local change_count = internal.change_count + 1
  internal.change_count = change_count ---@type integer
  changes[change_count] = {
    type = state_change.inserted,
    key = pos,
    new = value,
  }

  changed_state_lut[fake_list] = true

  return table_insert(data, pos, value)
end

---make sure to use `change_count` as the upper limit when iterating when using
---clear_changes to, well, clear changes, because it does not reset `changes`.
---@param state State
---@return StateChange[] changes
---@return integer change_count
---@return integer lowest_changed_index
local function get_changes(state)
  local internal = state.__internal
  return internal.changes, internal.change_count, internal.lowest_changed_index
end

---resets `change_count` and `lowest_changed_index`\
---does not clear `changes` for better overall performance,
---if that is required, use `force_clear_changes`\
---so make sure to use `change_count` when iterating
---@param state State
local function clear_changes(state)
  local internal = state.__internal
  internal.change_count = 0
  internal.lowest_changed_index = nil
end

---resets `changes`, `change_count` and `lowest_changed_index`\
---this creates a new table for `changes`, which is
---a waste of resources most of the time.
---@param state State
local function force_clear_changes(state)
  clear_changes(state)
  state.__internal.changes = {}
end

meta = {
  __len = function(current)
    return #current.__internal.data
  end,
  __pairs = function(current)
    return next, current.__internal.data, nil
  end,
  ---@param current State
  ---@param key Any
  ---@return Any
  __index = function(current, key) -- can optimize this to use a table as the __index
    -- which would requrie a new metatable for every internal table
    -- might be worth doing, not sure yet
    return current.__internal.data[key]
    -- don't even need to check if it's a table because the internal data is storing tables as fake tables
  end,
  ---@param state State
  ---@param key Any
  ---@param new_value Any
  __newindex = function(state, key, new_value)
    local internal = state.__internal

    local internal_data = internal.data
    local old_value = internal_data[key]
    if new_value ~= old_value then
      local changes = internal.changes
      local change_count = internal.change_count + 1
      internal.change_count = change_count ---@type integer
      changes[change_count] = {
        type = state_change.assigned,
        key = key,
        old = old_value,
        new = new_value, ---@type Any
      }

      changed_state_lut[state] = true

      internal_data[key] = new_value
    end
  end,
}

meta_util.register_meta(meta_id, meta)

---@param initial_state? table @ the initial state, defaults to {}
---@return State
local function create(initial_state)
  initial_state = hook(initial_state or {})
  return initial_state
end

-- undo the debugger being smart and using pairs, therefore __pairs for debugchildren
-- helps debugging the actual state while working on gui-glue
---@diagnostic disable: no-implicit-any
if __DebugAdapter and script.mod_name == "GuiGlue" then
  local variables = require("__debugadapter__.variables")
  local vdescribe = variables.describe
  local vcreate = variables.create

  function meta.__debugline(current)
    setmetatable(current, nil)
    local lineitem = vdescribe(current)
    setmetatable(current, meta)
    return lineitem
  end

  function meta.__debugchildren(current)
    local children = {}
    local count = 0
    for k, v in next, current do
      count = count + 1
      children[count] = vcreate(vdescribe(k), v)
    end
    return children
  end
end
---@diagnostic enable: no-implicit-any

return {
  on_load = on_load,
  on_init = on_init,
  get_changed_state_lut = get_changed_state_lut,
  hook = hook,
  create = create,
  is_hooked = is_hooked,
  ensure_hook = ensure_hook,
  unhook = unhook,
  remove = remove,
  insert = insert,
  get_changes = get_changes,
  clear_changes = clear_changes,
  force_clear_changes = force_clear_changes,
}
