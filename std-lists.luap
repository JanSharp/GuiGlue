
local gui = require("gui")
local state_util = require("state-util")
local enums = require("enums")
local state_change = enums.state_change

---@class StdListInst : GuiInst
---@field state Any[] @ It's actually a state, smile
---@field list_items GuiInst[]
local std_list = {class_name = "std-list"}

function std_list.create(params)
  local self = {
    type = "flow",
    direction = "vertical",
    -- style_mods = params.style_mods,
    -- style = params.style,
  }
  return self, {
    state = state_util.create(params.list),
    list_items = {},
  }
end

---@param self StdListInst
---@param index integer
---@param state_item Any
function std_list:create_list_item(index, state_item)
  local list_item = self:add{
    index = index,

    -- TODO: temp hardcoded
    class = "label",
    caption = state_item,
  }
  return list_item
end

function std_list:on_children_created()
  for i, v in pairs(self.state) do
    self.list_items[i] = self:create_list_item(i, v)
  end
end

function std_list:draw()
  local changes, change_count = state_util.get_changes(self.state)
  local list_items = self.list_items
  for i = 1, change_count do
    local change = changes[i]
    changes[i] = nil
    local key = change.key
    local change_type = change.type
    if change_type == state_change.assigned then
      list_items[key]:destroy()
      list_items[key] = self:create_list_item(key, change.new)
    elseif change_type == state_change.inserted then
      table.insert(list_items, key, self:create_list_item(key, change.new))
    elseif change_type == state_change.removed then
      list_items[key]:destroy()
      table.remove(list_items, key)
    else
      error("Scream.")
    end
  end
  self.state.__internal.change_count = 0 -- HACK: how to best reset changes
end

gui.register_class(std_list)

-- fix semantics