
---@diagnostic disable: no-implicit-any
---@diagnostic disable: undefined-field

local std_gui = require("__GuiGlue__.std-gui")
local attr = require("__GuiGlue__.std-gui-attributes")
local state_util = require("__GuiGlue__.state-util")
local enums = require("__GuiGlue__.enums")

local std_list = {
  class_name = "std-list",
  type = "flow",

  states = {"list_state"},

  on_elem_created = self => {
    local list_items = {}
    self.list_items = list_items
    for i, item in pairs(self.list_state) do
      list_items[i] = self:create_list_item(i, item)
    end
    self:update_indexes(1)
  },

  on_state_dispatch = (self, list_state, state_name) => {
    self:update_children()
  },

  create_list_item = (self, index, item) => {
    local states
    if self.get_states then
      states = {self:get_states(item)}
    else
      states = {
        state_util.is_hooked(item)
          and item
          or state_util.create(item)
      }
    end
    local list_item = self:add{
      class = self.structs.list_item,
      index = index,
      states = states,
    }
    return list_item
  },

  update_indexes = (self, start_index) => {
    local list_state = self.list_state
    local list_items = self.list_items
    for i = start_index, #list_state do
      local item_inst = list_items[i]
      local set_index = item_inst.set_index
      if set_index then
        set_index(item_inst, i)
      else
        list_state[i].index = i
      end
    end
  },

  update_children = self => {
    local list_state = self.list_state
    local changes, change_count, lowest_changed_index = state_util.get_changes(list_state)
    local list_items = self.list_items
    for i = 1, change_count do
      local change = changes[i]
      local key = change.key
      local change_type = change.type
      if change_type == enums.state_change.assigned then
        list_items[key]:destroy()
        local item_inst = self:create_list_item(key, change.new)
        list_items[key] = item_inst
        local set_index = item_inst.set_index
        if set_index then
          set_index(item_inst, key)
        else
          change.new.index = key
        end
      elseif change_type == enums.state_change.inserted then
        table.insert(list_items, key, self:create_list_item(key, change.new))
      elseif change_type == enums.state_change.removed then
        list_items[key]:destroy()
        table.remove(list_items, key)
      else
        error("Scream.")
      end
    end
    if lowest_changed_index then
      self:update_indexes(lowest_changed_index)
    end
  },
}

std_gui.register_class(std_list)

local ordered_list = {
  class_name = "std-ordered-list",
  base_class = "std-list",
  is_core = true,
  states = {"state"},

  structs = {
    reorder_btn = {
      class_name = "reorder_btn",
      type = "button",
      states = {"btn_state"},
      use_core_states = true,
      caption = attr.dynamic({"btn_state.picked_up", "state.picked_up_btn"},
        (_, state, btn_state) => (btn_state.picked_up and "Picked up ..." or state.picked_up_btn and "Drop Here" or "Pickup")
      ),
      on_elem_created = self => {
        local parent_core = self.parent.is_core and self.parent or self.parent.core
        self.btn_state.item_state = parent_core:get_item_state()
      },
      ---@param event on_gui_click
      on_click = (self, event) => {
        local state = self.state
        if event.button == defines.mouse_button_type.left then
          if state.picked_up_btn then
            self.btn_state.picked_up = nil
            local list = self.core.list_state
            state_util.remove(list, state.picked_up_btn.item_state.index)
            state_util.insert(list, self.btn_state.item_state.index, state.picked_up_btn.item_state)
            state.picked_up_btn = nil
          else
            self.btn_state.picked_up = true
            state.picked_up_btn = self.btn_state
          end
        else
          state.picked_up_btn.picked_up = nil
          state.picked_up_btn = nil
        end
        std_gui.draw()
      },
    },
  },
}

std_gui.register_class(ordered_list)
