
---@diagnostic disable: no-implicit-any
---@d iagnostic disable: undefined-field

local enums = require("enums")
local gui = require("gui")
local std_gui = require("std-gui")
local attr = require("std-gui-attributes")
local state_util = require("state-util")
local meta_util = require("metatable-util")
require("std-ordered-list")

script.on_init(std_gui.on_init)
script.on_load(() => {
  meta_util.restore_metatables()
  std_gui.on_load()
})

local foo = new StdGuiStructure{
  class_name = "foo",
  type = "frame",
  states = {"state", "player_state"},
  is_core = true,

  direction = "vertical",
  caption = attr.dynamic({"state.number", "player_state.age"},
    (state, player_state) => ("Num: "..tostring(state.number)..", Age: "..player_state.age)
  ),

  ---@param event on_gui_click
  on_click = (self, event) => {
    if event.button == defines.mouse_button_type.left then
      self.state.number = self.state.number + 1
    elseif event.button == defines.mouse_button_type.right then
      self.state.number = self.state.number - 1
    elseif event.button == defines.mouse_button_type.middle then
      self.state.number = 0
    end
    self:draw()
  },

  ---@param event on_gui_location_changed
  on_location_changed = (self, event) => {
    self.state.number = self.state.number + 1
    self:draw()
  },

  -- TODO: support static and dynamic attributes in elem_mods and style_mods
  elem_mods = {auto_center = true},
  style_mods = {
    width = 500,
    height = 400,
  },


  children = {
    new StdGuiStructure{
      class_name = "list",
      base_class = "std-ordered-list",
      is_core = true,
      direction = "vertical",
      -- get_states = (self, item) => (self.core.state, state_util.ensure_hook(item)),
      on_create = (self, data) => {
        data.list_state = data.core.state.list
      },

      structures = {
        list_item = new StdGuiStructure{
          class_name = "list_item",
          type = "flow",
          direction = "horizontal",
          is_core = true,
          states = {"item_state"},
          children = {
            new StdGuiStructure{
              class_name = "lb",
              type = "label",
              use_core_states = true,
              caption = attr.dynamic({"item_state.index", "item_state.name"},
                item_state => (tostring(item_state.index)..": "..item_state.name)
              ),
            },
          },
          on_children_created = self => {
            self:add(new StdGuiChild{
              controller = self.controller,
              class = self.core.structures.reorder_btn,
            })
          },
          get_item_state = self => (self.item_state),
        },
      },
    },
    -- {
    --   class_name = "list",
    --   base_class = "std-list",
    --   direction = "vertical",

    --   on_create = (self, data) => {
    --     data.list_state = data.core.state.list
    --   },

    --   get_states = (self, item) => (self.core.state, state_util.ensure_hook(item)),

    --   structures = {
    --     list_item = {
    --       class_name = "item",
    --       is_core = true,
    --       type = "flow",
    --       direction = "horizontal",
    --       states = {"state", "item_state"},
    --       set_index = (self, index) => {self.item_state.index = index},

    --       children = {
    --         {
    --           class_name = "lb",
    --           type = "label",
    --           use_core_states = true,
    --           caption = attr.dynamic({"item_state.index"},
    --             (state, item_state) => ("["..tostring(item_state.index).."]")
    --           ),
    --         },
    --         {
    --           class_name = "btn",
    --           type = "button",
    --           use_core_states = true,
    --           caption = attr.dynamic({"state.number", "item_state.number"},
    --             (state, item_state) => (tostring(state.number).." + "..tostring(item_state.number))
    --           ),
    --           on_click = (self, event) => {
    --             self.state.number = self.state.number + self.item_state.number
    --             self:draw()
    --           },
    --         },
    --         {
    --           class_name = "up",
    --           type = "button",
    --           use_core_states = true,
    --           caption = "Move Up",
    --           on_click = (self, event) => {
    --             local list = self.state.list
    --             local item = self.item_state
    --             local index = item.index
    --             if index == 1 then
    --               return
    --             end
    --             list[index], list[index - 1] = list[index - 1], list[index]
    --             self:draw()
    --           },
    --         },
    --         {
    --           class_name = "down",
    --           type = "button",
    --           states = {"state", "item_state"},
    --           on_create = (self, data) => {
    --             data.state = data.core.state
    --             data.item_state = data.core.item_state
    --           },
    --           caption = "Move Down",
    --           on_click = (self, event) => {
    --             local list = self.state.list
    --             local item = self.item_state
    --             local index = item.index
    --             if index == #list then
    --               return
    --             end
    --             list[index], list[index + 1] = list[index + 1], list[index]
    --             self:draw()
    --           },
    --         },
    --       },
    --     },
    --   },
    -- },
  },
}

std_gui.register_class(foo)


-- on_pre_create = (child, parent) => {
--   -- pre create
-- },
-- on_create = (self, data) => {
--   -- pre gui element creation
-- },
-- on_elem_created = self => {
--   -- post gui element creation
-- },
-- on_children_created = self => {
--   -- post children creation
-- },
-- on_destroy = self => {
--   -- post elem deletion
-- },

-- on_derive = () => {
--   -- not sure yet
-- },


script.on_event(defines.events.on_player_created, function(event)
  local player = game.get_player(event.player_index)

  local controller = state_util.create_controller()

  local player_state = {
    player = player,
    age = 100,
  }

  local state = {
    number = 0,
    list = {
      {name = "one"},
      {name = "two"},
      {name = "three"},
      {name = "four"},
      {name = "five"},
      {name = "six"},
      {name = "seven"},
      {name = "eight"},
      {name = "nine"},
      {name = "ten"},
    },
  }

  local inst = gui.create(player.gui.screen, {
    class = "foo",
    controller = controller,
    player_state = player_state,
    state = state,
  })

  -- state.list[2] = {number = 10}
  -- state.list[2], state.list[1] = state.list[1], state.list[2]
  -- inst:draw()

  -- state_util.insert(state.list, 1, {number = 34})
  -- inst:draw()
end)

-- fix semantics