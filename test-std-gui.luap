
---@diagnostic disable: no-implicit-any
---@d iagnostic disable: undefined-field

local enums = require("enums")
local gui = require("gui")
local std_gui = require("std-gui")
local attr = require("std-gui-attributes")
local state_util = require("state-util")
local meta_util = require("metatable-util")
-- require("std-ordered-list")

script.on_init(std_gui.on_init)
script.on_load(() => {
  meta_util.restore_metatables()
  std_gui.on_load()
})

local foo = new StdGuiStructure{
  class_name = "foo",
  states = {"state", "player_state"},

  elem = {
    type = "frame",
    direction = "vertical",
    caption = attr.dynamic({"state.number", "player_state.age"},
      (state, player_state) => ("Num: "..tostring(state.number)..", Age: "..player_state.age)
    ),
  },

  events = {
    ---@param event on_gui_click
    on_click = (self, event) => {
      if event.button == defines.mouse_button_type.left then
        self.state.number = self.state.number + 1
      elseif event.button == defines.mouse_button_type.right then
        self.state.number = self.state.number - 1
      elseif event.button == defines.mouse_button_type.middle then
        self.state.number = 0
      end
      self:draw()
    },
  },

  -- ---@param event on_gui_location_changed
  -- on_location_changed = (self, event) => {
  --   self.state.number = self.state.number + 1
  --   self:draw()
  -- },

  elem_mods = {auto_center = true},
  style_mods = {
    width = 500,
    height = 400,
  },

  get_children = self => ({
    new StdGuiChild{
      class = self.structures.btn,
      controller = self.controller,
      core = self,
      state = self.state,
      my_state = {name = "first", modifier = 2},
    },
    new StdGuiChild{
      class = self.structures.btn,
      controller = self.controller,
      core = self,
      state = self.state,
      my_state = {name = "second", modifier = 3, width = 300},
    },
    new StdGuiChild{
      class = self.structures.sub_frame,
      controller = self.controller,
      core = self,
      state = self.state,
    },
  }),

  structures = {
    btn = new StdGuiStructure{
      class_name = "btn",
      states = {"state", "my_state"},
      elem = {
        type = "button",
        caption = attr.dynamic({"my_state.name", "my_state.modifier"},
          (_, my_state) => (my_state.name.." ["..my_state.modifier.."]")
        ),
      },
      style_mods = {
        width = attr.static((_, my_state) => (my_state.width or 0))
      },
      events = {
        ---@param event on_gui_click
        on_click = (self, event) => {
          local state = self.state
          if event.button == defines.mouse_button_type.left then
            state.number = state.number * self.my_state.modifier
            self:draw()
          elseif event.button == defines.mouse_button_type.right then
            state.number = state.number / self.my_state.modifier
            self.my_state.modifier = self.my_state.modifier - 0.01
            self:draw()
          end
        },
      },
    },
    sub_frame = new StdGuiStructure{
      class_name = "sub-frame",
      states = {"state"},
      elem = {
        type = "frame",
        style = "inside_deep_frame",
      },
      style_mods = {
        width = attr.dynamic("state.number", state => (state.number * 2)),
        height = attr.dynamic("state.number", state => (state.number * 1.5)),
      },
    },
  },
}

std_gui.register_class(foo)

local bar = new StdGuiStructure{
  class_name = "bar",
  base_class = "foo",

  get_children = self => {
    local children = self:base_get_children()
    children[#children+1] = new StdGuiChild{
      class = self.structures.btn,
      controller = self.controller,
      core = self,
      state = self.state,
      my_state = {name = "from bar!", modifier = 10, width = 200},
    }
    return children
  },

  structures = {
    btn = new StdGuiStructure{
      class_name = "btn",
      base_class = "foo-btn",

      events = {
        ---@param event on_gui_click
        on_click = (self, event) => {
          if self.base_on_click then
            self:base_on_click(event)
          end
          if event.shift and event.button == defines.mouse_button_type.right then
            self.my_state.modifier = self.my_state.modifier / 2
          end
          self:draw()
        },
      },
    }
  },
}

std_gui.register_class(bar)

-- on_pre_create = (child, parent) => {
--   -- pre create
-- },
-- on_elem_created = self => {
--   -- post gui element creation
-- },
-- on_children_created = self => {
--   -- post children creation
-- },
-- on_destroy = self => {
--   -- post elem deletion
-- },

-- TODO: on_derive... not sure yet
-- on_derive = () => {
--   -- not sure yet
-- },


script.on_event(defines.events.on_player_created, function(event)
  local player = game.get_player(event.player_index)

  local controller = state_util.create_controller()

  local player_state = {
    player = player,
    age = 100,
  }

  local state = {
    number = 0,
    list = {
      {name = "one"},
      {name = "two"},
      {name = "three"},
      {name = "four"},
      {name = "five"},
      {name = "six"},
      {name = "seven"},
      {name = "eight"},
      {name = "nine"},
      {name = "ten"},
    },
  }

  gui.create(player.gui.screen, {
    class = "bar",
    controller = controller,
    player_state = player_state,
    state = state,
  })

  -- gui.create(player.gui.screen, {
  --   class = "foo",
  --   controller = controller,
  --   player_state = player_state,
  --   state = state,
  -- })

  -- state.list[2] = {number = 10}
  -- state.list[2], state.list[1] = state.list[1], state.list[2]
  -- inst:draw()

  -- state_util.insert(state.list, 1, {number = 34})
  -- inst:draw()
end)

-- fix semantics